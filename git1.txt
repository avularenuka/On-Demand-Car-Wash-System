Install GIT & make sure it is added into PATH.
Section 0 -Use GIT as local VCS. Steps to follow:
1.	Create a directory ‘project_dir’ & cd to ‘project_dir’. 
A   .             Mkdir project dir
                   Cd project dir

2.	Initialize git version database. (git init)
A                 Git init
                    Initialized empty Git repository inC:/Users/User/project_dir/.git/

3.	Create a new file index.html.
A               Git html.txt
                 We create index.html file while in notepad

4.	Check the git status. You should find index.html as untracked file.
A.	Yes, while we check git status we got like this,
                     On branch master 
                     No commits yet
                     Untracked files
                 ( use :git add <file>…” “ to include in what will be committed)
                        Index.html
                     Nothing added to commit but untracked files present (use “git add” to track)

5.	Stage the index.html file.
A                Git add index.html or you can add directory in git repository file

6.	Commit index.html

A.	Git  commit   -m “to committed the file”

7.	Make few changes in index.html & create a new file info.txt file.

A.	 By using  commit command few changes made
1.file changed,0 insertions(+),0 deletion(-)

8.	Check git status. You should find index.html & info.txt as untracked files.
A.                   On branch master
                        Nothing to commit ,working tree clean


9.	Configure GIT to ignore all txt files.

A.	Git config  --global user.username(github username)


10.	Again check the git status. You should find only index.html as untracked file.

A.                   On branch master
                      Nothing to commit.working tree clean

11.	State & commit index.html

A.                    Git add index.html
                       Git commit –m “to commit the file”
     

12.	Log all your comments so far.

A.                  Git log –oneline
                     Author:our username with mail
                      Date:current date
                        To commit the file

13.	Make some changes in index.html.
A.	Git commit –m “to commit the file “


14.	Revert the change made in the previous step using git command.

A.	Git revert HEAD
                     Revert “to commit the file”
                       This reverts commit


15.	Again change index.html.

A.                      Git commit command
                         

16.	Stage index.html
A.	Git status and git add command

                         Git add .


17.	Revert back the last stage.
A.	Git revert—abort or using reset command
                    Git revert “id”     //command id

18.	Rename ‘add’ command to ‘my-add’.

A                     .Git config   --global  alias .my-add  add

19.	Using my_add command Stage index.html again & commit the changes.

A.Git  my-add  index.html
Git commit –m “text message”.

20.	Revert the last commit.

A.	Git commit—amend –m “correct message”

                       GIT Branching
                         Objective: Commit HTML, CSS & JavaScript assignments into GIT. 

SECTION-1 (HTML assignments) - Steps to follow:

21.	First take a backup of your assignments & projects. This is required because due to                        incorrect GIT operation you may lose your files.
A.

22.	Create an empty directory ‘Assignments’ & cd to ‘Assignments’.
A.	Assignments
                      Cd Assignments

23.	Create a file README.txt inside ‘Assignments’ & write few lines about the contents of ‘Assignments’ folder.

A.	create A  text filr README

24.	Commit README.txt file.

A.Git commit  --m  “message”

25.	Now create a new branch ‘html-assignments’.

A.	Git checkout  -b html-assignments

26.	Switch to ‘html-assignments’ branch.

A.	Once we create new branch it switch to  html-assignments

27.	Copy all HTML assignments inside ‘Assignments’ folder.

A.	Copy the all html codes

28.	Commit HTML assignments into ‘html-assignments’ branch.

A.	Git add –all
                     Git commit –m  “message”

29.	Make minor changes into few files belonging to ‘html-assignments’ branch.

A                    Git add. command

30.	Commit those changed files.

A                         Git.commit command
 
31.	Switch to master branch.


32.	Make minor changes into README.txt file & commit those changes into master.


33.	Again switch to ‘html-assignments’ branch.


34.	Make minor changes into few files belonging to ‘html-assignments’ branch.


35.	Commit those changes.


36.	Switch to master.


37.	Merge ‘html-assignments’ branch into master. Confirm all html assignments are shown in master.


38.	Finally delete the ‘html-assignments’ branch.



SECTION-2 - (CSS assignments) Steps to follow:
1.	Create a new branch ‘css-assignments’.


2.	Switch to ‘css-assignments’ branch.


3.	Copy all CSS assignments inside ‘Assignments’ folder.


4.	Commit CSS assignments into ‘css-assignments’ branch.


5.	Make minor changes into README.txt file on line 1 belonging to ‘css-assignments’ branch.


6.	Commit those changed files.


7.	Switch to master branch.


8.	Make minor changes into README.txt file on line 3 & commit those changes into master.


9.	Again switch to ‘css-assignments’ branch.


10.	Make minor changes into few files belonging to ‘css-assignments’ branch.


11.	Commit those changes.


12.	Switch to master.


13.	Merge ‘css-assignments’ branch into master. Confirm all css assignments are shown in master.


14.	Finally delete the ‘css-assignments’ branch.



SECTION-3 - (JavaScript assignments) Steps to follow:
1.	Create a new branch ‘js-assignments’.

2.	Switch to ‘js-assignments’ branch.

3.	Copy all JavaScript assignments inside ‘Assignments’ folder.

4.	Commit JavaScript assignments into ‘js-assignments’ branch.

5.	Make minor changes into README.txt file on line 1 belonging to ‘js-assignments’                      branch.

6.	Commit those changed files.

7.	Switch to master branch.

8.	Make minor changes into README.txt file on line 1 & commit those changes into master.

9.	Again switch to ‘js-assignments’ branch.

10.	Make minor changes into few files belonging to ‘js-assignments’ branch.

11.	Commit those changes.

12.	Switch to master.

13.	Merge ‘js-assignments’ branch into master. Confirm all JavaScript assignments are shown in master.

14.	Finally delete the ‘js-assignments’ branch.


                                           GIT Remoting

Objective: Pushing source code into GITHUB & collaborate team members. 

SECTION-3 (Pushing assignments to remote repository) - Steps to follow:

39.	Create a github account if you do not have already.

A  If you don't already have a GitHub account, you may need to register for a new GitHub account to participate in open source while at Google. While setting up your account, you must enable 2-Factor Authentication (2FA), as this is necessary to participate in all Google organizations.

40.	Login on into github account.
                 
A.                     Use the File menu, then click Options.
                          In the Options window, select Accounts.
                           To the right of "GitHub.com," click Sign in.
                          In the Sign in pane, click Sign in using your browser. ...
                         To authenticate to GitHub, type your GitHub.com credentials and click Sign in.

41.	Create new public repository ‘freshersbatch-oct16’.

A.                 you do not have any repositories associated with GitHub Desktop, you will see a                      "Let's get started!" view, where you can choose to create and clone a tutorial                       repository, clone an existing repository from the Internet, create a new repository, or                      add an existing repository from your hard drive. 

42.	Commit & push any sample file to this repository under ‘Assignments’ directory

                A.          cd <destination folder> Create a new branch to add your file into. ...
                                  ls. You should see the name of the file in the list shown. ...
                                  git status. ...
                                  git add <name of file> ...
                                  git status. ...
                                  git commit -m "DESCRIBE COMMIT IN A FEW WORDS" ...
                                  git push origin <branch-name>


SECTION-4 (Pushing source code to remote repository using Eclipse GIT plugin) - Steps to follow:
1.	One developer from project team will create eclipse projects ‘SampleProj’ & add sample source code files. Then commit all files through eclipse GIT plugin.

2.	Collaborate other team members with your github account so that they can also modify the committed files. 

3.	Other developers from same team will checkout all files from remote repository. This might get conflicts since certain files fail to merge. In such case, merge it manually.

4.	Commit & push the ‘SampleProj’ project.


